% a newproc [np]
% example greeting []
% example module_info []
% a call [10]
% a module_info []
% a test [a]
% a test [b]
% a test [0]
% lists append [[1, 2, 3], 4, 5, 6]]
% lists append [[[1, 2], [], [3]]]
% lists concat [[a, 1, 1.5, [55, 56, 57]]]
% lists duplicate [3, d]
% lists zip [[a, b], [1, 2]]
% lists reverse [a]
% lists reverse [[a, b, c]]
% lists reverse [[1, 2], [0]]
% a map [mapitem]
% a tuple [[]]
% add add [1, 2]
% a call [1]
% a funs [[1, 2, 3]]
% a all [[a, a]]
% a all [[a, b]]
% a any [[b, a]]
% a sending []
% a sendrecv []
% a bignum1 []
% a bignum2 []
% a bignum3 []
% b recv_catch [1]
% b old_catch [1]
% b throw []
% numop relation [1, 2, 3]
% numop bool [true]
% b bin3 [<<1, 2, 3>>, <<4, 5, 6>>]
% b bin3 [<<1>>, <<2>>]
% b bin4 [1, 513, <<2,3>>]
% b client_call ["hello client"]
% pizza start []
% pizza order [margherita]
% b errors []
% cmod case_clause [b]
% cmod if_clause [2]
% cmod is_f [a]
% cmod is_f_helper []
% cmod fadd [1]
% cmod fadd [1.0, 1.1]
% Elixir.ExApp start []
% Elixir.ExApp state []
% sudoku start []
%cmod rand [10]
%sudoku_logic solution [[[5,3,0,0,7,0,0,0,0],[6,0,0,1,9,5,0,0,0],[0,9,8,0,0,0,0,6,0],[8,0,0,0,6,0,0,0,3],[4,0,0,8,0,3,0,0,1],[7,0,0,0,2,0,0,0,6],[0,6,0,0,0,0,2,8,0],[0,0,0,4,1,9,0,0,5],[0,0,0,0,8,0,0,7,9]]]
%sudoku_logic solution [[[5,3,4,6,7,8,9,1,2],[6,7,2,1,9,5,3,4,8],[1,9,8,3,4,2,5,6,7],[8,0,0,0,6,0,0,0`,3],[4,0,0,8,0,3,0,0,1],[7,0,0,0,2,0,0,0,6],[0,6,0,0,0,0,2,8,0],[0,0,0,4,1,9,0,0,5],[0,0,0,0,8,0,0,7,9]]]
%sudoku_logic solution [[[5,3,4,6,7,8,9,1,2],[6,7,2,1,9,5,3,4,8],[1,9,8,3,4,2,5,6,7],[8,5,9,7,6,1,4,2,3],[4,0,0,8,0,3,0,0,1],[7,0,0,0,2,0,0,0,6],[0,6,0,0,0,0,2,8,0],[0,0,0,4,1,9,0,0,5],[0,0,0,0,8,0,0,7,9]]]
%sudoku_logic solution [[[5,3,4,6,7,8,9,1,2],[6,7,2,1,9,5,3,4,8],[1,9,8,3,4,2,5,6,7],[8,5,9,7,6,1,4,2,3],[4,2,6,8,5,3,7,9,1],[7,1,3,9,2,4,8,5,6],[0,6,0,0,0,0,2,8,0],[0,0,0,4,1,9,0,0,5],[0,0,0,0,8,0,0,7,9]]]
%sudoku_logic generate_grid [60]
a append [[1,2,3],a]
